# EXPECT-WELL-FORMED
# EXPECT-STUCK
# EXPECT-TYPE-ERROR-COUNT 1
# EXPECT-TYPE-ERROR ~result [] "rx = x and tru" "x = zero" "0" "bool" "int"

zero = 0;
one = 1;
tru = true;
fls = false;

f = fun x -> ( rx = x and tru );
g = fun y -> ( ry = y or fls );

a = f zero;
b = g a; # knock-on error!
c = b xor tru; # not b
