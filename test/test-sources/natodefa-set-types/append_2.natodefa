let hd l = 
  match l with
  | x :: xs -> x
  | [] -> (0 0)
  end
in
let tl l = 
  match l with
  | x :: xs -> xs
  | [] -> (0 0)
  end
in

# Std.List - end

# let x0 = input in
# let x1 = input in
let x2 = input in

# let none = [] in

let a = [1, 2] in

let b = [3, 4, 5] in

# through the original is [a, [b]]

# let d = [a, b] in

let rec append l1 l2 =
  match l1 with
  | x :: xs -> 
    let next2 = append xs l2 in
    x :: next2
  | [] -> l2
  end
in
let result = append a b in

if 
  # hd result == x0
  # hd (tl result) == x1
  # hd (tl (tl result)) == x2
  hd (tl (tl (tl result))) == x2
then
  let target = 1 in target
else
  0