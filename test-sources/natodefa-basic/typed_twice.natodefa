let twice (f : int -> int) (x : int) : int = f (f x) in
let inc (x : int) : int = x + 1 in
twice inc 0

let twice f x = f (f x) in
let ~test_expr4 =  
    let ~arg1 = fun ~tval3 ->
        if 
            match ~tval3 with 
            | int -> true 
            | any -> false 
            end 
        then input
        else assert false
    in
    let ~arg2 = input in
        match (twice ~arg1 ~arg2) with 
        | int -> true 
        | any -> false 
        end 
in
let inc x = x + 1 in
let ~test_expr6 = 
    let ~arg5 = input in
        match (inc ~arg5) with 
        | int -> true 
        | any -> false 
        end 
in (twice inc 0)
