let intId (x : int) : int = x in
id 5

___first = {};
intId___1 = fun x -> (
var___0 = x);
intId = intId___1;
input___2 = input;
___arg3 = input___2;
var___3 = intId;
var___4 = ___arg3;
m___16 = var___3 ~ fun;
appl___5 = m___16 ? (c_appl___17 = var___3 var___4) : (
                                                        ab___18 = abort 
                                                        [appl___5]
                                                        );
m_bool___6 = appl___5 ~ int;
m_cond___7 = m_bool___6 ? (bool___8 = true) : (
                                                m_bool___9 = appl___5 ~ any;
                                                m_cond___10 = m_bool___9 
                                                ? (bool___11 = false) : 
                                                    (
                                                        ab___12 = abort 
                                                        [
                                                            m_cond___10,
                                                            m_cond___7
                                                        ]
                                                        )
                                                );
___test_expr4 = m_cond___7;
var___13 = id;
int___14 = 5;
m___19 = var___13 ~ fun;
appl___15 = m___19 ? (c_appl___20 = var___13 int___14) : (
                                                            ab___21 = abort 
                                                            [appl___15]
                                                            );
___result = appl___15