LetFunWithType
let fold = fun self ->
let inner_fun f  acc  lst =
  match lst with | [] -> acc | hd :: tl -> f  hd  (self  self  f  acc  tl)
  end in
  let ~test_expr11 = let ~arg1 = fun ~tval4 ->
  if match ~tval4 with | int -> true | any -> assert false end then
    fun ~tval5 ->
      if match ~tval5 with
        
          | [] -> true
          | ~discard9 :: ~discard10 ->
          let rec
            
              ~testFun6
              ~testList7
               =
              match ~testList7 with
              
                | [] -> true
                | hd :: tl ->
                let ~dummy8 = match hd with
                  | int -> true | any -> assert false end in ~testFun6  tl
               end
             in ~testFun6  ~tval5
          | any -> assert false
         end then input else assert false
    else assert false
  in
  let ~arg2 = input in
  let ~arg3 = input in
  match inner_fun  ~arg1  ~arg2  ~arg3 with
  | int -> true | any -> assert false end in inner_fun in
fold  fold
LetFunWithType

